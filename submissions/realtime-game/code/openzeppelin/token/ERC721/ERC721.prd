// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)

import IERC721;
import IERC721Metadata;

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 implements IERC721.Interface, IERC721Metadata.Interface {
    // Token name
    string _name;

    // Token symbol
    string _symbol;

    @global map<uint256, address> _owners;

    @global map<address, uint256> _balances;

    @global map<uint256, address> _tokenApprovals;

    // owner => operator => bool
    @global map<address, map<address, bool>> _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    @global function on_deploy(string name_, string symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    @global function uint256 balanceOf(address owner) public const {
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    @global function address ownerOf(uint256 tokenId) public const {
        return _requireOwned(tokenId);
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    @global function const string name() public const {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    @global function const string symbol() public const {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    @global function string tokenURI(uint256 tokenId) public const {
        _requireOwned(tokenId);

        string baseURI = _baseURI();
        if (baseURI.length() == 0u16) {
            return "";
        }
        // return baseURI + string(tokenId);
        return string(tokenId);
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    @global function string _baseURI() const {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    @global function approve(address to, uint256 tokenId) public {
        _approve(to, tokenId, __transaction.get_sender());
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    @global function address getApproved(uint256 tokenId) public const {
        _requireOwned(tokenId);

        return _getApproved(tokenId);
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    @global function setApprovalForAll(address operator, bool approved) public {
        _setApprovalForAll(__transaction.get_sender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    @global function bool isApprovedForAll(address owner, address operator) public const {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    @global function transferFrom(address from, address to, uint256 tokenId) public {
        // Setting an "auth" arguments enables the `_isAuthorized` check which verifies that the token exists
        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.
        __debug.print(_update(to, tokenId, __transaction.get_sender()) != from, "ERC721IncorrectOwner");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    @global function safeTransferFrom(address from, address to, uint256 tokenId) public {
        transferFrom(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    @global function safeTransferFrom(address from, address to, uint256 tokenId, blob data) public {
        transferFrom(from, to, tokenId);
    }

    /**
     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
     *
     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the
     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances
     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by
     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.
     */
    @global function address _ownerOf(uint256 tokenId) const {
        return _owners[tokenId];
    }

    /**
     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.
     */
    @global function address _getApproved(uint256 tokenId) const {
        return _tokenApprovals[tokenId];
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in
     * particular (ignoring whether it is owned by `owner`).
     *
     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
     * assumption.
     */
    @global function bool _isAuthorized(address owner, address spender, uint256 tokenId) const {
        return
            // spender != address(0) &&
            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);
    }

    /**
     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.
     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets
     * the `spender` for the specific `tokenId`.
     *
     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
     * assumption.
     */
    @global function _checkAuthorized(address owner, address spender, uint256 tokenId) const {
        __debug.assert(_isAuthorized(owner, spender, tokenId), "ERC721InsufficientApproval");
    }

    /**
     * @dev Unsafe write access to the balances, used by extensions that "mint" tokens using an {ownerOf} override.
     *
     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that
     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.
     *
     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the
     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership
     * remain consistent with one another.
     */
    @global function _increaseBalance(address account, uint128 value) {
        _balances[account] += value;
    }

    /**
     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner
     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.
     *
     * The `auth` argument is optional. If the value passed is non 0, then this function will check that
     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).
     *
     * Emits a {Transfer} event.
     *
     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.
     */
    @global function address _update(address to, uint256 tokenId, address auth) {
        address from = _ownerOf(tokenId);

        // Perform (optional) operator check
        // if (auth != address(0)) {
            _checkAuthorized(from, auth, tokenId);
        // }

        // Execute the update
        // if (from != address(0)) {
            // Clear approval. No need to re-authorize or emit the Approval event
            // _approve(address(0), tokenId, address(0), false);

            _balances[from] -= 1u256;
        // }

        // if (to != address(0)) {
            _balances[to] += 1u256;
        // }

        _owners[tokenId] = to;

        __debug.print("Transfer, from: ", from, ", to: ", to, ", tokenId: ", tokenId);

        return from;
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    @global function _mint(address to, uint256 tokenId) {
        // _update(to, tokenId, address(0));
    }

    /**
     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    @global function _safeMint(address to, uint256 tokenId) {
        _mint(to, tokenId);
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    @global function _safeMint(address to, uint256 tokenId, blob data) {
        _mint(to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     * This is an internal function that does not check if the sender is authorized to operate on the token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    @global function _burn(uint256 tokenId) {
        // _update(address(0), tokenId, address(0));
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    @global function _transfer(address from, address to, uint256 tokenId) {
        // __debug.assert(_update(to, tokenId, address(0)) != from, "ERC721IncorrectOwner");
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients
     * are aware of the ERC-721 standard to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is like {safeTransferFrom} in the sense that it invokes
     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `tokenId` token must exist and be owned by `from`.
     * - `to` cannot be the zero address.
     * - `from` cannot be the zero address.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    @global function _safeTransfer(address from, address to, uint256 tokenId) {
        _transfer(from, to, tokenId);
    }

    /**
     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeTransfer(address from, address to, uint256 tokenId, blob data) {
        _transfer(from, to, tokenId);
    }

    /**
     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not
     * emitted in the context of transfers.
     */
    @global function _approve(address to, uint256 tokenId, address auth) {
        // Avoid reading the owner unless necessary
        // if (auth != address(0)) {
            address owner = _requireOwned(tokenId);

            // We do not use _isAuthorized because single-token approvals should not be able to call approve
            // __debug.assert(auth != address(0) && owner != auth && !isApprovedForAll(owner, auth), "ERC721InvalidApprover");
        // }

        _tokenApprovals[tokenId] = to;
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Requirements:
     * - operator can't be the address zero.
     *
     * Emits an {ApprovalForAll} event.
     */
    @global function _setApprovalForAll(address owner, address operator, bool approved) {
        _operatorApprovals[owner][operator] = approved;
        __debug.print("ApprovalForAll, owner: ", owner, ", operator: ", operator, ", approved: ", approved);
    }

    /**
     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).
     * Returns the owner.
     *
     * Overrides to ownership logic should be done to {_ownerOf}.
     */
    @global function address _requireOwned(uint256 tokenId) const {
        return _ownerOf(tokenId);
    }    
}
