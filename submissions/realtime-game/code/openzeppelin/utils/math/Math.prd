// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)

/**
 * @dev Standard math utilities missing in the Preda language.
 *
 * Errors:
 *  MathOverflowedMulDiv - Muldiv operation overflow.
 */
contract Math {
    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).
     */
    @global function const uint256 tryAdd(uint256 a, uint256 b) const {
        uint256 c = a + b;
        if (c < a) { return 0u256; }
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).
     */
    @global function const uint256 trySub(uint256 a, uint256 b) const {
        if (b > a) { return 0u256; }
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).
     */
    @global function const uint256 tryMul(uint256 a, uint256 b) const {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0u256) { return 0u256; }
            uint256 c = a * b;
            if (c / a != b) { return 0u256; }
            return c;
    }

    /**
     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).
     */
    @global function const uint256 tryDiv(uint256 a, uint256 b) const {
            if (b == 0u256) { return 0u256; }
            return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).
     */
    @global function const uint256 tryMod(uint256 a, uint256 b) const {
            if (b == 0u256) { return 0u256; }
            return a % b;
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    @global function const uint256 max(uint256 a, uint256 b) const {
        if (a > b) {
            return a;
        }
        return b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    @global function const uint256 min(uint256 a, uint256 b) const {
        if (a < b) {
            return a;
        }
        return b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    @global function const uint256 average(uint256 a, uint256 b) const {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2u256;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    @global function const uint256 ceilDiv(uint256 a, uint256 b) const {
        if (b == 0u256) {
            // Guarantee the same behavior as in a regular Solidity division.
            return a / b;
        }

        // The following calculation ensures accurate ceiling division without overflow.
        // Since a is non-zero, (a - 1) / b will not overflow.
        // The largest possible result occurs when (a - 1) / b is type(uint256).max,
        // but the largest value we can obtain is type(uint256).max - 1, which happens
        // when a = type(uint256).max and b = 1.
        if (a == 0u256) {
            return 0u256;
        }
        return (a - 1u256) / b + 1u256;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    @global function const uint256 mulDiv(uint256 x, uint256 y, uint256 denominator) const {
            return 0u256;
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    @global function const uint256 mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) const {
        return 0u256;
    }

}
