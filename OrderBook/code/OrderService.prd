import OrderBook;
import MatchEngine;
contract OrderService {
    @global uint256 orderNum;

    @global function on_deploy() {
        __debug.print(__address());
    }

    @global function createOrder(address owner, string pair, uint256 price, uint256 amount, OrderBook.Action action) public {
        __debug.assert(price > 0u256, "price > 0");
        __debug.assert(amount > 0u256, "amount > 0");
        OrderBook.Order order;
        orderNum++;
        order.id = orderNum;
        order.owner = owner;
        order.price = price;
        order.amount = amount;
        order.unMatchedAmount = amount;
        order.status = OrderBook.OrderStatus.OPEN;
        order.action = action;
        order.pair = pair;
        address orderBookAddr = address(hash(pair));
        relay@orderBookAddr (^order) {
            MatchEngine.processOrder(order);
        }
    }

    @address function buy(string pair, uint256 price, uint256 amount) public export {
        address sender = __transaction.get_sender();
        relay@global createOrder(sender, pair, price, amount, OrderBook.Action.BUY);
    }

    @address function sell(string pair, uint256 price, uint256 amount) public export {
        address sender = __transaction.get_sender();
        relay@global createOrder(sender, pair, price, amount, OrderBook.Action.SELL);
    }

    @address function cancel(string pair, uint256 orderId) public export {
        address initiator = __transaction.get_sender();
        address orderBookAddr = address(hash(pair));
        relay@orderBookAddr (^initiator, ^orderId) {
            MatchEngine.cancel(initiator, orderId);
        }
    }
}