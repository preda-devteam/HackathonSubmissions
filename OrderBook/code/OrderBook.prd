contract OrderBook {
    enum OrderStatus {
        OPEN,
        FIXED,
        PARTIALLYFIXED,
        CANCELED
    }

    enum Action {
        BUY,
        SELL
    }

    struct Order {
        uint256 id;
        address owner;
        uint256 price;
        uint256 amount;
        uint256 unMatchedAmount;
        uint256 triggerPrice;
        OrderStatus status;
        Action action;
        string pair;
    }

    enum Sort {
        ASC,
        DES
    }

    struct OrderSortModel {
        uint256 prevOrder;
        Order order;
        uint256 nextOrder;
    }

    struct Book {
        uint256 head;
        map<uint256, OrderSortModel> orderList;
        uint256 length;
        Sort sort;
    }

    @global address owner;
    @global map<address, bool> controllers;

    @global function on_deploy(address _owner) {
        owner = _owner;
        __debug.print(__address());
    }

    @address function addController(address controller) public export {
        __debug.assert(owner == __transaction.get_sender(), "only onwer can add controller.");
        relay@global (^controller) {
            controllers[controller] = true;
            __debug.print("add controller: ", controller);
        }
    }

    @address function removeController(address controller) public export {
        __debug.assert(owner == __transaction.get_sender(), "only onwer can remove controller.");
        relay@global (^controller) {
            __debug.assert(controllers.has(controller));
            controllers.erase(controller);
            __debug.print("remove controller: ", controller);
        }
    }

    @global function uint256 getLength(Book book) public const{
        return book.length;
    }

    @global function Order getFirst(Book book) public const {
        __debug.assert(book.head != 0u256, "order book is empty.");
        return book.orderList[book.head].order;
    }

    @global function Order getOrder(Book book, uint256 orderId) public const {
        return book.orderList[orderId].order;
    }

    @global function bool has(Book book, uint256 orderId) public const {
        return book.orderList.has(orderId);
    }


    @global function add(Book book, Order order) public const {
        address sender = __transaction.get_sender();
        __debug.assert(controllers.has(sender), "only controller can call this function.");
        if (book.length == 0u256) { // add first order
            book.head = order.id;
            OrderSortModel orderSortModel;
            orderSortModel.order = order;
            orderSortModel.prevOrder = 0u256;
            orderSortModel.nextOrder = 0u256;
            book.orderList[order.id] = orderSortModel;
            book.length++;
            __debug.print("order add: ", order);
            // __debug.print("current orderList: ", book.orderList);
            return;
        }
        
        // Look for a place in the order book to add a new order
        uint256 currentOrderId = book.head;
        uint256 prevOrderId = 0u256;
        if (book.sort == Sort.ASC) { // ASCï¼Œsellbook
            while (order.price >= book.orderList[currentOrderId].order.price) {
                prevOrderId = currentOrderId;
                currentOrderId = book.orderList[currentOrderId].nextOrder;
                if (currentOrderId == 0u256) {
                    break;
                }
            } 
        } else { // DES, buybook
            while (order.price <= book.orderList[currentOrderId].order.price) {
                prevOrderId = currentOrderId;
                currentOrderId = book.orderList[currentOrderId].nextOrder;
                if (currentOrderId == 0u256) {
                    break;
                }
            } 
        }
        // __debug.print("current: ", currentOrderId, ", prev: ", prevOrderId);
        OrderSortModel orderSortModel;
        orderSortModel.order = order;
        orderSortModel.prevOrder = prevOrderId;
        orderSortModel.nextOrder = currentOrderId;
        book.orderList[order.id] = orderSortModel;
        if (prevOrderId != 0u256) {
            book.orderList[prevOrderId].nextOrder = order.id;
        } else {
            book.head = order.id;
        }
        if (currentOrderId != 0u256) {
            book.orderList[currentOrderId].prevOrder = order.id;
        }
        book.length++;
        __debug.print("order add: ", order);
        // __debug.print("current orderList: ", book.orderList);
    }

    @global function remove(Book book, Order order) public const {
        address sender = __transaction.get_sender();
        __debug.assert(controllers.has(sender), "only controller can call this function.");
        __debug.assert(book.orderList.has(order.id));
        OrderSortModel orderWillDelete = book.orderList[order.id];
        // __debug.print(orderWillDelete.prevOrder);
        if (orderWillDelete.prevOrder == 0u256 && orderWillDelete.nextOrder == 0u256) {
            book.head = orderWillDelete.nextOrder;
        } else if (orderWillDelete.prevOrder == 0u256 && orderWillDelete.nextOrder != 0u256) {
            book.head = orderWillDelete.nextOrder;
            book.orderList[orderWillDelete.nextOrder].prevOrder = 0u256;
        } else if (orderWillDelete.prevOrder != 0u256 && orderWillDelete.nextOrder == 0u256) {
            book.orderList[orderWillDelete.prevOrder].nextOrder = 0u256;
        } else {
            book.orderList[orderWillDelete.prevOrder].nextOrder = orderWillDelete.nextOrder;
            book.orderList[orderWillDelete.nextOrder].prevOrder = orderWillDelete.prevOrder;
        }
        book.orderList.erase(order.id);
        book.length--;
        __debug.print("order remove: ", order);
        // __debug.print("current orderList: ", book.orderList);
    }

    @global function updateOrder(Book book, Order new_order) public const {
        address sender = __transaction.get_sender();
        __debug.assert(controllers.has(sender), "only controller can call this function.");
        __debug.assert(book.orderList.has(new_order.id));
        book.orderList[new_order.id].order = new_order;
        __debug.print("order update: ", new_order);
    }

}